{
	"name": "df_transform_casesDeaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_CasesDeaths",
						"type": "DatasetReference"
					},
					"name": "CaseDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_countryLookup",
						"type": "DatasetReference"
					},
					"name": "SourceCountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processed_ecdc_casesDealths",
						"type": "DatasetReference"
					},
					"name": "SinkCasesDeaths"
				}
			],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "SelectRequiredField"
				},
				{
					"name": "PivotIndicator"
				},
				{
					"name": "LookupCountryCode"
				},
				{
					"name": "SelectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CaseDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
				"CaseDeathsSource filter(and (continent == \"Europe\", not(isNull(country_code)))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredField",
				"SelectRequiredField pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotIndicator",
				"PivotIndicator, SourceCountryLookup lookup(PivotIndicator@country == SourceCountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCode",
				"LookupCountryCode select(mapColumn(",
				"          country = SourceCountryLookup@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = PivotIndicator@population,",
				"          cases_count = {count_confirmed cases},",
				"          dealths_count = count_deaths,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForSink",
				"SelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkCasesDeaths"
			]
		}
	}
}